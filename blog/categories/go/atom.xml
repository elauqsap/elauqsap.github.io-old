<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | thought|pipe]]></title>
  <link href="http://elauqsap.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://elauqsap.github.io/"/>
  <updated>2016-10-06T22:43:20-05:00</updated>
  <id>http://elauqsap.github.io/</id>
  <author>
    <name><![CDATA[elauqsap]]></name>
    <email><![CDATA[3lauqsap@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build a RESTful JSON API in Go - API Part III]]></title>
    <link href="http://elauqsap.github.io/blog/2016/10/06/how-to-build-a-restful-json-api-in-go-api-part-iii/"/>
    <updated>2016-10-06T18:03:28-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/10/06/how-to-build-a-restful-json-api-in-go-api-part-iii</id>
    <content type="html"><![CDATA[<p>Concluding our build of a <a href="https://github.com/elauqsap/echo-postgres-json-api">RESTful JSON API with a Postgres database</a>, we will explore the code that binds the backend queries to the HTTP methods. Instead of using the builtin networking tools for HTTP, I decided to use <a href="https://echo.labstack.com/">echo</a>.</p>

<!--more-->


<h3>Server</h3>

<p>As we discussed in the previous part of the tutorial, by adding JSON tags we can embed the database configuration. That way we can load both configs from the same file.</p>

<pre><code class="go">type (
    // Config for the server and database
    Config struct {
        Server struct {
            Bind    string `json:"bind"`
            Cert    string `json:"cert"`
            Key     string `json:"key"`
            LogPath string `json:"log,omitempty"`
        } `json:"server"`
        Database database.Config `json:"database"`
    }
)
</code></pre>

<p>With our configuration file modeled, all we need to do is read it into memory and <code>Unmarshal()</code> the data into the structure. From there we can call the method receivers on both <code>Database{}</code> and <code>Server{}</code> for setup. <code>NewServer()</code> creates an echo instance, binds middleware, and groups routes for the User API. It also calls <code>database.Config.NewStore()</code> which creates and passes back a connection to the database.</p>

<pre><code class="go">// NewConfig loads the configurations into a structure
// to be used as a global operator at runtime
func NewConfig(path string) (conf *Config) {
    data, _ := ioutil.ReadFile(path)
    if err := json.Unmarshal(data, &amp;conf); err != nil {
        return nil
    }
    return conf
}

// NewServer returns a configured api server instance
func (c *Config) NewServer() (*echo.Echo, error) {
    e := echo.New()
    if logFile, err := os.OpenFile(c.Server.LogPath, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0660); err != nil {
        e.Use(middleware.Logger())
    } else {
        e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{Output: logFile}))
    }
    e.Use(middleware.Recover())
    api := e.Group("/api/v1")
    if store, err := c.Database.NewStore(); err == nil {
        data := &amp;Data{store}
        handlers := &amp;Handlers{User: data}
        api.POST("/user", handlers.User.CreateUser)
        api.GET("/user", handlers.User.ReadUser)
        api.PUT("/user", handlers.User.UpdateUser)
        api.DELETE("/user", handlers.User.DeleteUser)
    } else {
        return nil, err
    }
    return e, nil
}
</code></pre>

<h3>User API</h3>

<p>In <code>NewServer()</code> there is a variable called <code>handlers</code> which is where all of the HTTP handlers for the echo routes are defined. <code>Handlers{}</code> are essentially a definition of the CRUD methods and some defined type. They can be used because <code>*database.Store{}</code> is embedded in <code>Data{}</code> and the interface <code>UserCRUD{}</code> is implemented as pointer receiver methods for <code>Data{}</code>. Therefore by initializing <code>Handlers.User</code> with <code>*Data{}</code>, the pointer receiver methods are available to <code>Handlers.User</code> so they can be passed as a handler for the route.</p>

<pre><code class="go">type (
    // Handlers are the HTTP handlers to be used by the API router
    Handlers struct {
        User UserCRUD
    }
)
</code></pre>

<p>All that is left to do from here is implement each CRUD method of the <code>UserCRUD</code> interface. The example below shows how I implemented <code>CreateUser()</code>. Since <code>echo.Context</code> is passed to this pointer method I use an anonymous structure to bind to the <code>POST</code> data. That way I can control which data the user actually gets to define. If binding fails the server sends an <code>400</code> error and returns. If it passes then a <code>database.User</code> is created from the request. Since this is a pointer method with the database embedded in it, all that is left is to pass the <code>database.Query</code> that represents the newly defined <code>database.User</code>. Depending on the transaction response, a success or error message is sent back.</p>

<pre><code class="go">func (d *Data) CreateUser(c echo.Context) error {
    bind := struct {
        First string `json:"first"`
        Last  string `json:"last"`
        Role  string `json:"role"`
    }{}
    if err := c.Bind(&amp;bind); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]interface{}{
            "code":    1010,
            "message": "invalid user or json format in request body",
        })
    }
    user := &amp;database.User{First: bind.First, Last: bind.Last, Role: bind.Role}
    if err := d.EWT(user.Create()); err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]interface{}{
            "code":    1011,
            "message": "user could not be created",
        })
    }
    return c.JSON(http.StatusOK, map[string]interface{}{
        "code":    1000,
        "message": "user was successfully created",
    })
}
</code></pre>

<p>There are multiple ways to create a RESTful API in golang even though it is an opinionated language. I came from a Ruby on Rails background and I found this structure to be similar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a RESTful JSON API in Go - Database Part II]]></title>
    <link href="http://elauqsap.github.io/blog/2016/09/29/how-to-build-a-restful-json-api-in-go-database-part-ii/"/>
    <updated>2016-09-29T23:19:20-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/09/29/how-to-build-a-restful-json-api-in-go-database-part-ii</id>
    <content type="html"><![CDATA[<p>In this portion of building a <a href="https://github.com/elauqsap/echo-postgres-json-api">RESTful JSON API with a Postgres database</a>, we explore the database powering the backend. I decided to use the builtin SQL library with a Postgres driver rather than using an ORM.</p>

<!--more-->


<h3>Database</h3>

<p>Configuring the connection is important and we need to make sure it can used elsewhere. By exporting <code>Config</code> we can embed it in another configuration structure and populate them all at once using JSON tags. Plus by adding a method receiver we can easily return a connection after a configuration file has been parsed.</p>

<pre><code class="go">type (
  // Config for postgres db
  Config struct {
    Auth
    Name           string `json:"name"`
    Host           string `json:"host"`
    Port           int    `json:"port"`
    SSL            string `json:"ssl_mode"`
    ConnectTimeout int    `json:"connect_timeout"`
  }
  // Store embeds an instance of a sql.DB so we can
  // inject new method receivers
  Store struct {
    *sql.DB
  }
)

// NewStore returns a configured *Store instance
func (c Config) NewStore() (*Store, error) {
    pg, err := Reverse(c.Auth)
    if err != nil {
        return nil, err
    }
    source := fmt.Sprintf("user=%s password=%s dbname=%s host=%s port=%d sslmode=%s connect_timeout=%d", pg.A, pg.B, c.Name, c.Host, c.Port, c.SSL, c.ConnectTimeout)
    db, err := sql.Open("postgres", source)
    if err != nil {
        return nil, err
    }
    if err = db.Ping(); err != nil {
        return nil, err
    }
    return &amp;Store{db}, nil
}
</code></pre>

<p>Because Go allows embedding structures in each other I decided to embed a <code>*sql.DB</code> into a new structure so that I can expand upon it&rsquo;s functions. As seen above we create a new <code>Store{}</code> which contains an embedded pointer to a SQL database. From here we can create new pointer receiver methods that implement functionality that we need. In the example below I created two new methods to perform <code>Exec()</code> &amp; <code>QueryRow()</code> with a SQL transaction.</p>

<pre><code class="go">// EWT is execute with transaction
func (s *Store) EWT(st Statement) error {
    return s.Transact(func(tx *sql.Tx) error {
        res, err := tx.Exec(st.Query, st.Args...)
        if aff, _ := res.RowsAffected(); aff &lt; 1 {
            return errors.New("no change during execution")
        }
        return err
    })
}

// QWT is query with transaction
func (s *Store) QWT(st Statement, v interface{}) error {
    return s.Transact(func(tx *sql.Tx) error {
        return tx.QueryRow(st.Query, st.Args...).Scan(v)
    })
}
</code></pre>

<p>Another important piece is the structure <code>PropertyMap</code> which is of type <code>map[string]interface{}</code>. This is necessary to read and write JSON values back to the database which we will later see in the Model implementation.</p>

<pre><code class="go">// PropertyMap allows to map and store JSON data with Postgres
type PropertyMap map[string]interface{}

// Value map to a sql driver value
func (p PropertyMap) Value() (driver.Value, error) {
    j, err := json.Marshal(p)
    return j, err
}

// Scan map from sql return to a PropertyMap
func (p *PropertyMap) Scan(src interface{}) error {
    source, ok := src.([]byte)
    if !ok {
        return errors.New("Type assertion .([]byte) failed.")
    }

    var i interface{}
    err := json.Unmarshal(source, &amp;i)
    if err != nil {
        return err
    }

    *p, ok = i.(map[string]interface{})
    if !ok {
        return errors.New("Type assertion .(map[string]interface{}) failed.")
    }

    return nil
}
</code></pre>

<h3>Migrations</h3>

<p>The migration component allows the application to be portable while also serving a function in testing. It allows the test database to be easily wiped and the schema to be reconfigured. Which helps in making sure the test outcomes are always the same and no previous tests interfere with the returns.</p>

<p>Because the schema needs to be rebuilt in an order, I created a migration method which sorts each level of the map by their keys and then performs the same sorting on the inner map. This way all you need to do to expand upon the migration is to add your SQL statement with the given order of operation it needs.
<code>go
// migrations to perform
var migrations = map[int]map[int]string{
    // schema commands in the order to be performed
    mSCHEMA: map[int]string{
        0: `DROP SCHEMA IF EXISTS app CASCADE`,
        1: `CREATE SCHEMA IF NOT EXISTS app AUTHORIZATION appbot`,
    },
    // type commands in the order to be performed
    mTYPE: map[int]string{
        0: `CREATE TYPE app.roles AS ENUM ('user','manager','admin')`,
    },
    // table commands in the order to be performed
    mTABLE: map[int]string{
        0: `CREATE TABLE IF NOT EXISTS app.users (
                    id SERIAL PRIMARY KEY,
                    first varchar(100) NOT NULL CHECK (first &lt;&gt; ''),
                    last varchar(100) NOT NULL CHECK (last &lt;&gt; ''),
                    role app.roles NOT NULL DEFAULT 'user',
                    api_key char(32) NOT NULL UNIQUE
            )`,
    },
    // index commands in the order to be performed
    mINDEX: map[int]string{
        0: `CREATE INDEX role_idx ON app.users (role)`,
    },
}
</code></p>

<h3>Modeling</h3>

<p>All that is left now is to build your models and make sure they implement the <code>CRUD</code> interface. We only have one model for this example but they should all be the same layout just different structures. As each structure should model the table it will be working with. The JSON tags on each element allow us to easily bind data so that it can be used by both the API and database.</p>

<p>Each <code>CRUD</code> pointer receiver method as defined by the interface should return a <code>Statement</code>. This is essentially the <code>query</code> &amp; <code>args</code> parameters of the <code>*sql.DB</code>&rsquo;s <code>Exec()</code> &amp; <code>QueryRow()</code>.</p>

<pre><code class="go">type (
    // User models the app.users table
    User struct {
        ID    int    `json:"id"`
        First string `json:"first"`
        Last  string `json:"last"`
        Role  string `json:"role"`
        Key   string `json:"api_key"`
    }
)

// Create builds the Statement to insert a user into the database
func (u *User) Create() Statement {
    u.GenerateKey(32)
    if len(u.Role) &lt;= 0 {
        u.Role = USER
    }
    return Statement{
        "INSERT INTO app.users (first,last,role,api_key) VALUES ($1,$2,$3,$4)",
        []interface{}{u.First, u.Last, u.Role, u.Key},
    }
}

// Read creates the Statement to read a user from the database
func (u *User) Read() Statement {
    return Statement{
        "SELECT ROW_TO_JSON(u) FROM (SELECT * FROM app.users WHERE id = $1) AS u",
        []interface{}{u.ID},
    }
}

// Update creates the Statement to update a user in the database
func (u *User) Update(v interface{}) Statement {
    // no merging needed to ignore v
    return Statement{
        "UPDATE app.users SET first = $1,last = $2,role = $3 WHERE id = $4",
        []interface{}{u.First, u.Last, u.Role, u.ID},
    }
}

// Delete creates the Statement to delete a user from the database
func (u *User) Delete() Statement {
    return Statement{
        "DELETE FROM app.users WHERE id = $1",
        []interface{}{u.ID},
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a RESTful JSON API in Go - Testing Part I]]></title>
    <link href="http://elauqsap.github.io/blog/2016/09/27/how-to-build-a-restful-json-api-in-go-testing-part-i/"/>
    <updated>2016-09-27T22:11:53-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/09/27/how-to-build-a-restful-json-api-in-go-testing-part-i</id>
    <content type="html"><![CDATA[<p>In my recent endeavor with Go I needed to create a <a href="https://github.com/elauqsap/echo-postgres-json-api">RESTful JSON API with a Postgres database</a>. This blog series outlines what I learned and the methods chosen to implement the API. First up in this blog series demonstrates the implementation of Behavioral Driven Development utilizing <a href="https://github.com/smartystreets/goconvey">GoConvey</a>.</p>

<!--more-->


<h3>GoConvey Setup</h3>

<p>There are two primary parts to test within this example and I decided to break them up into &ldquo;sub-packages&rdquo;. These &ldquo;sub-packages&rdquo; include api for handling the RESTful aspects and database for communicating with Postgres instance. Go makes testing very easy by sourcing any file <code>*_test.go</code> and running any test functions that start with <code>Test*</code>. For both &ldquo;sub-packages&rdquo; I created a single Test function and created a general structure to model each test structure.</p>

<p>Take the <code>database</code> sub-package for example. There is only one test function and that is in <code>database_test.go</code>. The other test file only contains test cases to be conveyed.
<code>bash
database
├── database.go
├── database_test.go
├── migrate.go
├── user.go
└── user_test.go
</code>
Diving deeper into <code>TestDatabase()</code>, we test out database connection items and migrate our schema for the test environment. The final portion of the function takes <code>[]ModelTest</code> and runs each test case.</p>

<pre><code class="go">type (
    ModelTest struct {
        Title string
        Func  func(*Store) func()
    }
    TestConfig struct {
        Config `json:"database"`
    }
)

var Conf TestConfig
var Data *Store

func TestDatabase(t *testing.T) {
    Convey("The Database Should", t, func() {
        Convey("Be Configurable From A JSON File", func() {
            data, err := ioutil.ReadFile("../configs/example.config.json")
            So(err, ShouldBeNil)
            So(json.Unmarshal(data, &amp;Conf), ShouldBeNil)
            So(Conf, ShouldNotBeEmpty)
            Data, err = Conf.NewStore()
            So(err, ShouldBeNil)
            So(Data, ShouldNotBeNil)
        })
        Convey("Have Migrations For The Schema", func() {
            So(Data.Migrate(false), ShouldBeNil)
        })
    })
    var modelTests = []ModelTest{UserTest}
    for _, model := range modelTests {
        Convey("The Database "+model.Title, t, model.Func(Data))
    }
}
</code></pre>

<p>As you can see the <code>ModelTest</code> structure is in essence the parameters necessary to run <code>Convey()</code>. Since <code>*testing.T</code> was passed in the outermost <code>Convey()</code> it is not necessary for these nested tests. There for we can pass it a <code>string</code> conveying what it will test and some arbitrary test <code>func()</code>. Below is the test of the <code>POST</code> portion of the RESTful interface for the user model. The other conveyed tests in <code>user_test.go</code> check <code>GET</code>, <code>PUT</code>, &amp; <code>DELETE</code> implementation.</p>

<pre><code class="go">var UserTest = ModelTest{
    Title: "User Model Should",
    Func: func(store *Store) func() {
        return func() {
            Convey("Implement The CRUD Interface", func() {
                So(&amp;User{}, ShouldImplement, (*CRUD)(nil))
                Convey("A User Can Be Created", func() {
                    So(store.EWT(user.Create()), ShouldBeNil)
                    read := new(User)
                    pm := new(PropertyMap)
                    So(store.QWT(user.Read(), pm), ShouldBeNil)
                    data, err := json.Marshal(pm)
                    So(err, ShouldBeNil)
                    So(json.Unmarshal(data, read), ShouldBeNil)
                    So(read, ShouldResemble, user)
                })
      // Other Model tests go here ...
      })
    }
  },
}
</code></pre>

<h3>Running Tests</h3>

<p>After writing all of our test cases for the model, we can implement the model using red to green testing. I will go into implementing a model at a later date but below is the output you would get after running <code>go test -v</code> with completed code.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">===</span> RUN   TestDatabase&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  The Database Should
</span><span class='line'>    Be Configurable From A JSON File ✔✔✔✔✔
</span><span class='line'>    Have Migrations For The Schema ✔&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;6 total assertions&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  The Database User Model Should
</span><span class='line'>    Implement The CRUD Interface ✔
</span><span class='line'>      A User Can Be Created ✔✔✔✔✔✔
</span><span class='line'>      A User Can Be Read ✔✔✔✔✔
</span><span class='line'>      A User Can Be Updated ✔✔✔✔✔✔
</span><span class='line'>      A User Can Be Deleted ✔✔&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;26 total assertions&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>mdash<span class="p">;</span> PASS: TestDatabase <span class="o">(</span>0.08s<span class="o">)</span>
</span><span class='line'>PASS
</span><span class='line'>ok      github.com/elauqsap/echo-postgres-json-api/database     0.083
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Work Pool and Dispatcher]]></title>
    <link href="http://elauqsap.github.io/blog/2016/05/25/building-a-go-work-pool-and-dispatcher/"/>
    <updated>2016-05-25T22:41:16-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/05/25/building-a-go-work-pool-and-dispatcher</id>
    <content type="html"><![CDATA[<p>I recently started working with <a href="https://golang.org/">Go</a> which is a very opinionated open source programming language from Google and contributors. It is a fantastic language and I rather enjoy how it has helped me develop as a programmer these past few months.</p>

<!--more-->


<h3>Back Story</h3>

<p>My new position at work requires me to work with a large data set that I decided to truncate into smaller sets for processing. I wanted to process each batch in parallel but without restricting myself to a single &ldquo;job type&rdquo;. So that in the future when the code requires a different &ldquo;job type&rdquo; I would not have to wrangle multiple work pools. In developing the solution, I found a work around to Go&rsquo;s lack of generics so I could process multiple &ldquo;job types&rdquo; via the same work pool. This code is modified from a blog post written <a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/">here</a>. I also packaged this code for my reuse <a href="https://github.com/elauqsap/workerpool">here</a>.</p>

<h3>Dispatcher</h3>

<p>The role of the <code>Dispatcher</code> is to initialize the <code>WorkerPool</code>, dispatch jobs as they are created, and wait for the go routines to finish before closing out the main thread.</p>

<pre><code class="go dispatcher.go">
package main

import "sync"

// Dispatcher creates workers and dispatches jobs when received
type Dispatcher struct {
    JobQueue   chan Job
    MaxWorkers int
    WaitGroup  *sync.WaitGroup
    // A pool of workers channels that are registered with the dispatcher
    WorkerPool chan chan Job
}

// NewDispatcher creates a dispatcher that is used to create workers
// and dispatch jobs to them
func NewDispatcher(maxWorkers int) *Dispatcher {
    pool := make(chan chan Job, maxWorkers)
    return &amp;Dispatcher{JobQueue: make(chan Job, 1024), MaxWorkers: maxWorkers, WorkerPool: pool, WaitGroup: &amp;sync.WaitGroup{}}
}

// Run creates the workers and dispatches jobs from a JobQueue to each worker
func (d *Dispatcher) Run() {
    // starting n number of workers
    for i := 0; i &lt; d.MaxWorkers; i++ {
        worker := NewWorker(d.WorkerPool, d.WaitGroup)
        worker.Start()
    }

  // start the dispatcher routine
    go d.dispatch()
}

func (d *Dispatcher) dispatch() {
    for {
        select {
        case job := &lt;-d.JobQueue:
            // a job request has been received
            go func(job Job) {
                // try to obtain a worker job channel that is available.
                // this will block until a worker is idle
                jobChannel := &lt;-d.WorkerPool
                // dispatch the job to the worker job channel
                jobChannel &lt;- job
            }(job)
        }
    }
}
</code></pre>

<h3>Worker</h3>

<p>A <code>Worker</code> is started by the <code>Dispatcher</code>and registers itself to the <code>WorkerPool</code>. Once a <code>Job</code> has been sent to the <code>Dispatcher</code>, it waits for a <code>Worker</code> to become ready for processing and hands off the <code>Job</code> to the <code>Worker</code>. The <code>Worker</code> triggers the <code>process()</code> method of the <code>Job</code>.</p>

<pre><code class="go worker.go">package main

import (
    "fmt"
    "sync"
)

// Worker represents the worker that executes the job
type Worker struct {
  // A pool of workers channels that are registered with the dispatcher
    WorkerPool chan chan Job
  // A channel for receiving a job that was dispatched
    JobChannel chan Job
  // A channel for receiving a worker termination signal
  // (quits after processing)
  quit       chan bool
  // A WaitGroup to signal the completed processing of a Job
    wg         *sync.WaitGroup
}

// NewWorker creates a new worker that can be registered to a WorkerPool
// and receive jobs
func NewWorker(workerPool chan chan Job, wg *sync.WaitGroup) Worker {
    return Worker{
        WorkerPool: workerPool,
        JobChannel: make(chan Job),
        quit:       make(chan bool),
        wg:         wg}
}

// Start method starts the run loop for the worker, listening for a quit channel in
// case we need to stop it
func (w Worker) Start() {
    go func() {
        for {
            // register the current worker into the worker queue.
            w.WorkerPool &lt;- w.JobChannel

            select {
            case job := &lt;-w.JobChannel:
                job.process()
              // signal to the wait group that a queued job has been processed
              // so the main thread can continue
                w.wg.Done()
            case &lt;-w.quit:
                // we have received a signal to stop
                return
            }
        }
    }()
}
</code></pre>

<h3>Job</h3>

<p>All <code>Job</code> types implement a <code>process()</code> method. This way we do not need to infer types in the <code>Worker</code> thus allowing us to achieve a level of generic types in Go.</p>

<pre><code class="go jobs.go">package main

// Job interface will be implemented for each task so that they
// may be passed to workers in the pool by the dispatcher
type Job interface {
    process() error
}

type BatchJob struct {
  // define the struct
}

func (b BatchJob) process() error {
  // process data here for batch sets ...
}

type SingleJob struct {
  // define the struct
}

func (s SingleJob) process() error {
  // process data here for a single set ...
}
</code></pre>

<h3>All Together Now</h3>

<p>Here is an example of the above code in action. The <code>struct</code> need to be defined and <code>process()</code> implemented but it demonstrates the overall concept.</p>

<pre><code class="go main.go">package main

func main() {
  // Initialize a Dispatcher
  dispatcher := NewDispatcher(4)
  // Start the Dispatcher and create/register the Workers to the WorkerPool
  dispatcher.Run()
  // Queue two jobs for processing
  dispatcher.WaitGroup.Add(2)
  // Two jobs of different structures queued
  dispatcher.JobQueue &lt;- BatchJob{}
  dispatcher.JobQueue &lt;- SingleJob{}
  // Block main thread until processing in go routines completes
  dispatcher.WaitGroup.Wait()
}
</code></pre>
]]></content>
  </entry>
  
</feed>
